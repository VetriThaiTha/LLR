<h3>RegistrationInput</h3>

<div class="form-field">
    <label>PurchaseValue:</label>
    <div>
       ₹ <InputNumber id="PurchaseValue" @bind-Value="PurchaseValue"    />
    </div>
</div>

<div class="form-field">
    <label>WhiteBlackRatio:</label>
    <div>
        <InputNumber id="HighestBidValue" @bind-Value="WhiteBlackRatio"   />
    </div>
</div>

<div class="form-field">
    <label>RegistrationDate:</label>
    <div>
        <InputDate  @bind-Value="RegistrationDate" @bind-Value:format="dd-MM-yyyy"   />
    </div>
</div>

<div class="form-field">
    <label>HighestBidValue:</label>
    <div>
        <select @bind="HighestBidIndex"  >
            <option value=-1 >-- Select --</option>
            @foreach (var item in LrrState.AuctionDetails.ValidAuctionBidValues)
           {
               <option value=@item.Key >@item.Value</option>
           }
        </select>

    </div>
</div>
<div class="form-field">
    <label>Prov. buyer Decision:</label>
    <div>
        <select @bind="Decision"  >

            <option value=@Lrr.Shared.DecisionEnum.None > @((Lrr.Shared.DecisionEnum.None) )</option>
            @if (LrrState.InputData.HighestBidIndex > -1)
                {
                    <option value=@Lrr.Shared.DecisionEnum.MatchHighestBid  > @((Lrr.Shared.DecisionEnum.MatchHighestBid) )</option>
                    <option value=@Lrr.Shared.DecisionEnum.GiveUpToHighestBid > @((Lrr.Shared.DecisionEnum.GiveUpToHighestBid) )</option>
                }
        </select>

    </div>
</div>





<button class="btn btn-primary" @onclick="ReCalculateValues">Update Values</button>


@code {


    [Parameter] public Lrr.Shared.LrrState LrrState { get; set; }

    public int PurchaseValue
    {
        get { return LrrState.InputData.PurchaseValue; }
        set
        {
            if (LrrState.InputData.PurchaseValue != value) {
                LrrState.InputData.PurchaseValue = value;
                ReCalculateValues();
            }
        }
    }

    public int WhiteBlackRatio
    {
        get { return LrrState.InputData.WhiteBlackRatio; }
        set
        {
            if (LrrState.InputData.WhiteBlackRatio != value) {
                LrrState.InputData.WhiteBlackRatio = value;
                ReCalculateValues();
            }
        }
    }

    public DateOnly RegistrationDate
    {
        get { return LrrState.InputData.RegistrationDate; }
        set
        {
            if (LrrState.InputData.RegistrationDate != value) {
                LrrState.InputData.RegistrationDate = value;
                ReCalculateValues();
            }
        }
    }

    public int HighestBidIndex
    {
        get { return LrrState.InputData.HighestBidIndex; }
        set
        {
            if (LrrState.InputData.HighestBidIndex != value) {
                LrrState.InputData.HighestBidIndex = value;
                ReCalculateValues();
            }
        }
    }

    public Lrr.Shared.DecisionEnum Decision
    {
        get { return LrrState.InputData.Decision; }
        set
        {
            if (LrrState.InputData.Decision != value) {
                LrrState.InputData.Decision = value;
                ReCalculateValues();
            }
        }
    }

    private void ReCalculateValues()
    {
        LrrState.CalculateValues();
        InvokeAsync(() =>
                {

                    StateHasChanged();
                });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ReCalculateValues();
    }
}
