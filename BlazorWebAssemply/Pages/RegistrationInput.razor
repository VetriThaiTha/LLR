@using Lrr.Shared;

<table class="reportTable">
        <thead class="reportHead">
            <tr  >
                <th class="td-report" colspan="2" > Registration input</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-report" >
                    Purchase value:
                </td>
                <td class="td-report" >
                    ₹<InputNumber class="formatinput" style="width:13ch" id="PurchaseValue" @bind-Value="PurchaseValue"    />
                    <label>@FormatedPurchaseValue</label>
                    <ValidationMessage For="@(()=>PurchaseValue)"></ValidationMessage>
                    <label style="color: red;" >@(PurchaseValue_msg)</label>

                </td>
            </tr>
            <tr class="tr-alice">
                <td class="td-report" >
                    White / Black ratio:
                </td>
                <td class="td-report" >
                    <InputNumber class="formatinput" style="width:6ch" id="WhiteBlackRatio" @bind-Value="WhiteBlackRatio"   /> / @(100 - LrrState.InputData.WhiteBlackRatio)
                    <ValidationMessage For="@(()=>WhiteBlackRatio)"></ValidationMessage>
                    <label style="color: red;" >@(WhiteBlackRatio_msg)</label>
                </td>
            </tr>

            <tr>
                <td class="td-report" >
                    Registration date:
                </td>
                <td class="td-report" >
                    <InputDate class="formatinput" @bind-Value="RegistrationDate" @bind-Value:format="dd-MM-yyyy"   />
                    <ValidationMessage For="@(()=>RegistrationDate)"></ValidationMessage>
                </td>
            </tr>
        </tbody>
</table>
<ValidationSummary />
<br />

<table class="reportTable">
        <thead class="reportHead">
            <tr  >
                <th class="td-report" colspan="3" > Registration detail</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-report" >
                    Registration amount:
                </td>
                <td class="td-report" >
                    ₹@LrrState.AuctionDetails.FmtWhiteValue
                </td>
                <td class="td-notes" >@($"(purchase value ₹{ AuctionDetails.FmtIntVal(LrrState.InputData.PurchaseValue)} ) * (white black ratio { LrrState.InputData.WhiteBlackRatio} ) / 100.0")</td>
            </tr>
            <tr class="tr-alice">
                <td class="td-report" >
                    Cash payment (Black):
                </td>
                <td class="td-report" >
                    ₹@LrrState.AuctionDetails.FmtBlackValue
                </td>
                <td class="td-notes" >@($"(purchase value ₹{AuctionDetails.FmtIntVal(LrrState.InputData.PurchaseValue)} ) * ((100.0 - white black ratio {LrrState.InputData.WhiteBlackRatio}) / 100.0 )")</td>
            </tr>
        </tbody>
</table>
<br />

<table class="reportTable">
        <thead class="reportHead">
            <tr  >
                <th class="td-report" colspan="3" > Auction detail</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-report" >
                    Auction end date:
                </td>
                <td class="td-report" >
                    @LrrState.AuctionDetails.EndDate.ToString("dd/MMM/yyyy")
                </td>
                <td class="td-notes" >@($"Registration date + (auction duration {LrrState.Configuration.AuctionDuration} months) ")</td>
            </tr>
            <tr class="tr-alice">
                <td class="td-report" >
                    Auction starting value:
                </td>
                <td class="td-report" >
                    ₹@LrrState.AuctionDetails.FmtStartingValue
                </td>
                <td class="td-notes" >@($"(purchase value ₹{AuctionDetails.FmtIntVal(LrrState.InputData.PurchaseValue)} ) * (Auction starting value multiple {LrrState.Configuration.StartingValueMultiple})")</td>
            </tr>

            <tr>
                <td class="td-report" >
                    Auction step value:
                </td>
                <td class="td-report" >
                    ₹@LrrState.AuctionDetails.FmtStepValue
                </td>
                <td class="td-notes" >@($"(purchase value ₹{AuctionDetails.FmtIntVal(LrrState.InputData.PurchaseValue)} ) * (Auction step value multiple {LrrState.Configuration.StepValueMultiple})")</td>
            </tr>
        </tbody>
</table>

<br />
<table class="reportTable">
        <thead class="reportHead">
            <tr  >
                <th class="td-report" colspan="3" > Auction decisions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="td-report" >
                    Highest bid value:
                </td>
                <td class="td-report" >
                    <select class="formatinput" @bind="HighestBidIndex"  >
                        <option value=-1 >-- Select --</option>
                        @foreach (var item in LrrState.AuctionDetails.ValidAuctionBidValues)
                       {
                           <option value=@item.Key >@item.Value</option>
                       }
                    </select>
                </td>
            </tr>
            <tr class="tr-alice">
                <td class="td-report" >
                    Provisional buyer's decision:
                </td>
                <td class="td-report" >
                    <select class="formatinput" @bind="Decision"  >
                        <option value=@Lrr.Shared.DecisionEnum.None > None </option>
                        @if (LrrState.InputData.HighestBidIndex > -1)
                            {
                                <option value=@Lrr.Shared.DecisionEnum.MatchHighestBid  > Match highest Bid</option>
                                <option value=@Lrr.Shared.DecisionEnum.GiveUpToHighestBid > Give-up to highest Bid</option>
                            }
                    </select>
                </td>
            </tr>
        </tbody>
</table>

@code {


    [Parameter,EditorRequired] public Lrr.Shared.LrrState LrrState { get; set; }

    [Parameter, EditorRequired] public Action RefreshScreen { get; set; }

    private string PurchaseValue_msg { get; set; }
    private string WhiteBlackRatio_msg { get; set; }
    private int _pvalue { get; set; }
    private int _wRatio { get; set; }

    private string FormatedPurchaseValue
    {
        get
        {
            int lakh = 100000;
            int crore = lakh * 100;

            if (PurchaseValue < lakh)
                return string.Empty;
            var cVal = PurchaseValue / crore;
            var lVal = (PurchaseValue / lakh) % 100;

            var rtnVal = $"{lVal} lakh(s).";

            if (PurchaseValue >= crore){
                
                rtnVal = $"{cVal} crore(s) {rtnVal}";
            }
            return $"₹{rtnVal}";
                

        }
    }

    public int PurchaseValue
    {
        get { return string.IsNullOrEmpty(PurchaseValue_msg) ? LrrState.InputData.PurchaseValue : _pvalue; }
        set
        {
            PurchaseValue_msg = string.Empty;
            _pvalue = value;
            if (value < 1)
            {
                PurchaseValue_msg = "Purchas value cannot be less than 1";
                return;
            }

            if (LrrState.InputData.PurchaseValue != value) {
                LrrState.InputData.PurchaseValue = value;
                ReCalculateValues();
            }
        }
    }

    public int WhiteBlackRatio
    {
        get { return string.IsNullOrEmpty(WhiteBlackRatio_msg) ? LrrState.InputData.WhiteBlackRatio : _wRatio; }
        set
        {
            WhiteBlackRatio_msg = string.Empty;
            _wRatio = value;
            if (value > 100 )
            {
                WhiteBlackRatio_msg = "White / Black ratio cannot be greater than 100";
                return;
            }
            if (value < 0)
            {
                WhiteBlackRatio_msg = "White / Black ratio cannot be greater than 100";
                return;
            }

            if (LrrState.InputData.WhiteBlackRatio != value) {
                LrrState.InputData.WhiteBlackRatio = value;
                ReCalculateValues();
            }
        }
    }

    public DateOnly RegistrationDate
    {
        get { return LrrState.InputData.RegistrationDate; }
        set
        {
            if (LrrState.InputData.RegistrationDate != value) {
                LrrState.InputData.RegistrationDate = value;
                ReCalculateValues();
            }
        }
    }

    public int HighestBidIndex
    {
        get { return LrrState.InputData.HighestBidIndex; }
        set
        {
            if (LrrState.InputData.HighestBidIndex != value) {
                LrrState.InputData.HighestBidIndex = value;

                if (HighestBidIndex < 0)
                    Decision = Lrr.Shared.DecisionEnum.None;

                ReCalculateValues();
            }
        }
    }

    public Lrr.Shared.DecisionEnum Decision
    {
        get { return LrrState.InputData.Decision; }
        set
        {
            if (LrrState.InputData.Decision != value) {
                LrrState.InputData.Decision = value;
                ReCalculateValues();
            }
        }
    }

    private bool hasErrors()
    {
        return !(string.IsNullOrEmpty(PurchaseValue_msg) || string.IsNullOrEmpty(WhiteBlackRatio_msg));
    }

    private void ReCalculateValues()
    {
        if (hasErrors())
            return;

        LrrState.CalculateValues();
        if (RefreshScreen != null)
            RefreshScreen();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ReCalculateValues();
    }
}
